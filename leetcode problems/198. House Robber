typedef vector<int> vi;

class Solution {
public:
  int rec(vi & nums,int i){
    //base case
    
    if(i==0) return nums[0];
    if(i==1) return max(nums[1],nums[0]);
    //RF
   int take=nums[i]+rec(nums,i-2);
   int nottake=rec(nums,i-1);
   return max(take,nottake);
   
  }
  int memo_fun(vi&nums,int i,vi&memo){
    if(memo[i]!=-1) return memo[i];
    int take=nums[i]+memo_fun(nums,i-2,memo);
    int nottake=memo_fun(nums,i-1,memo);
    memo[i]=max(take,nottake);
     return max(take,nottake);

  }
  int tabulation(vi &nums){
    int n=nums.size();
    vi dp(n,-1);
    dp[0]=nums[0];
    dp[1]=max(nums[0],nums[1]);
    for(int i=2;i<n;i++){
    int take=nums[i]+dp[i-2];
    int nottake=dp[i-1];
    dp[i]=max(take,nottake);
    
    }
    return dp[n-1];
  }

  int tab_space(vi &nums){
    int n=nums.size();
   
   int prev2=nums[0],prev=max(nums[0],nums[1]);
    for(int i=2;i<n;i++){
    // int take=nums[i]+prev;
    // int nottake=prev2;
    int curr=max(nums[i]+prev2,prev);
    prev2=prev;
    prev=curr;
    
    
    }
    return prev;
  }
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==1) return nums[0];
     // return  rec(nums,nums.size()-1);
    //  vi memo(n,-1);
    //  memo[0]=nums[0];
    //  memo[1]=max(nums[0],nums[1]);
    //  return memo_fun(nums,n-1,memo);

   // return tabulation(nums);

      return tab_space(nums);

        }
       
    
};

// class Solution {
// public:
//     int solve(vector<int> &nums,int i){
//         if(i==0) return nums[0];
//         if(i==1) return max(nums[1],nums[0]);
//         int taken=nums[i]+solve(nums,i-2);
//         int skip=solve(nums,i-1);
//         return max(taken,skip);
//     }
    
//     int memo_fn(vector<int> &nums,int i,vector<int> &memo){
//         if(memo[i]!=-1) return memo[i];
//         int taken=nums[i]+memo_fn(nums,i-2,memo);
//         int skip=memo_fn(nums,i-1,memo);
//         return {memo[i]=max(taken,skip)};

//     }

//     int rob(vector<int>& nums) {
        
//         int n=nums.size(); //change n
//         if(n==1) return nums[0];
//         vector<int> memo(n,-1);
//          memo[0]=nums[0];
//          memo[1]=max(nums[0],nums[1]);
        
//         return memo_fn(nums,n-1,memo); //chnage
//     }
// };
