typedef vector<int> vi;
class Solution {
  public:
  int rec(vi &arr,int k,int i){
      //basecase
      if(i==0) return 0;
      //recursive call
      int ans=INT_MAX;
      for(int j=1;j<=k;j++){
          if(i-j>=0){
              int jump=abs(arr[i]-arr[i-j])+ rec(arr,k,i-j);
              ans=min(jump,ans);
          }
      }
      return ans;
  }
  int memo_fn(vi &arr,int k,int i,vi&memo){
      if(memo[i]!=-1) return memo[i];
      int ans=INT_MAX;
      for(int j=1;j<=k;j++){
          if(i-j>=0){
              int jump=abs(arr[i]-arr[i-j])+ memo_fn(arr,k,i-j,memo);
              ans=min(jump,ans);
          }
      }
      memo[i]=ans;
      return ans;
      
  }
  int tabulation (vi& arr,int k){
      int n=arr.size();
      vi dp(n,INT_MAX);
      dp[0]=0;
      for(int i=0;i<n;i++){
          for(int j=1;j<=k;j++){
              if(i-j>=0){
            int jump=abs(arr[i]-arr[i-j])+dp[i-j];
              dp[i]=min(jump,dp[i]);
              }
              
          }
      }
      return dp[n-1];
      
  }
 int tab_space(vector<int>& arr, int k) {
    int n = arr.size();
    if (n == 0) return 0;
    if (n == 1) return 0;

    int prev1 = 0; // dp[i-1]
    int prev2 = 0; // dp[i-2]

    for (int i = 1; i < n; i++) {
        int left = prev1 + abs(arr[i] - arr[i-1]);
        int right = INT_MAX;
        if (i > 1) right = prev2 + abs(arr[i] - arr[i-2]);
        int curr = min(left, right);

        prev2 = prev1;
        prev1 = curr;
    }
    return prev1;
}

    int minimizeCost(int k, vector<int>& arr) {
        // Code here
      // return  rec(arr,k,arr.size()-1);
      int n=arr.size();
      if(n<2) return 0;
    //   vi memo(n,-1);
    //   memo[0]=0;
    //   return memo_fn(arr,k,n-1,memo);
    
    //return tabulation(arr,k);
    return tab_space(arr,k);
    }
};
