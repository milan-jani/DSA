typedef vector<int> vi;
class Solution {
  public:
  int cost(vi &height,int i){ //recursion
      //base case
      if(i<2){
          return (i==0)? 0:abs(height[0]-height[1]);
      }
      int f=abs(height[i]-height[i-1])+ cost(height,i-1);
     int s= abs(height[i]-height[i-2])+cost(height,i-2);
        return min(f,s);
     
      
  }
  int memo_fn(vi &height,int i,vi& memo){
      if(memo[i]!=-1) return memo[i];
      int f=abs(height[i]-height[i-1])+ memo_fn(height,i-1,memo);
     int s= abs(height[i]-height[i-2])+memo_fn(height,i-2,memo);
     memo[i]=min(f,s);
        return min(f,s);
      
  }
  int tabulation(vi &height){
      int n=height.size();
      vi dp(n,0);
      dp[0]=0;dp[1]=abs(height[0]-height[1]);
      for(int i=2;i<n;i++){
    int f=abs(height[i]-height[i-1])+ dp[i-1];
     int s= abs(height[i]-height[i-2])+dp[i-2];
     dp[i]=min(f,s);
        
      }
      return dp[n-1];
  }
  int tab_space_opt(vi &height){
      if(height.size()<2) return 0;
      int n=height.size();
      
      int prev2=0;
      int prev=abs(height[0]-height[1]);
      
      for(int i=2;i<n;i++){
     int f=abs(height[i]-height[i-1])+ prev;
     int s= abs(height[i]-height[i-2])+prev2;
     int curr=min(f,s);
     prev2=prev;
     prev=curr;
        
      }
      return prev;
  }
    int minCost(vector<int>& height) {
        // Code here
        if(height.size()<2) return 0;
        int n=height.size();
       // return cost(height,height.size()-1); //recursion
       
    //   vi memo(n,-1);
    //   memo[0]=0; memo[1]=abs(height[0]-height[1]);
    //   return memo_fn(height,n-1,memo);
    
    
    //return tabulation(height);
    
    
    return tab_space_opt(height);
        
    }
};
